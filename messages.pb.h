// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class Message;

enum Message_CommandType {
  Message_CommandType_JOIN = 0,
  Message_CommandType_LEAVE = 1,
  Message_CommandType_HOST = 2,
  Message_CommandType_MSG = 3
};
bool Message_CommandType_IsValid(int value);
const Message_CommandType Message_CommandType_CommandType_MIN = Message_CommandType_JOIN;
const Message_CommandType Message_CommandType_CommandType_MAX = Message_CommandType_MSG;
const int Message_CommandType_CommandType_ARRAYSIZE = Message_CommandType_CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_CommandType_descriptor();
inline const ::std::string& Message_CommandType_Name(Message_CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_CommandType_descriptor(), value);
}
inline bool Message_CommandType_Parse(
    const ::std::string& name, Message_CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_CommandType>(
    Message_CommandType_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();
  
  Message(const Message& from);
  
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();
  
  void Swap(Message* other);
  
  // implements Message ----------------------------------------------
  
  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Message_CommandType CommandType;
  static const CommandType JOIN = Message_CommandType_JOIN;
  static const CommandType LEAVE = Message_CommandType_LEAVE;
  static const CommandType HOST = Message_CommandType_HOST;
  static const CommandType MSG = Message_CommandType_MSG;
  static inline bool CommandType_IsValid(int value) {
    return Message_CommandType_IsValid(value);
  }
  static const CommandType CommandType_MIN =
    Message_CommandType_CommandType_MIN;
  static const CommandType CommandType_MAX =
    Message_CommandType_CommandType_MAX;
  static const int CommandType_ARRAYSIZE =
    Message_CommandType_CommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommandType_descriptor() {
    return Message_CommandType_descriptor();
  }
  static inline const ::std::string& CommandType_Name(CommandType value) {
    return Message_CommandType_Name(value);
  }
  static inline bool CommandType_Parse(const ::std::string& name,
      CommandType* value) {
    return Message_CommandType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Message.CommandType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Message_CommandType type() const;
  inline void set_type(::Message_CommandType value);
  
  // required string src = 2;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 2;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  
  // optional string data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  
  // @@protoc_insertion_point(class_scope:Message)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::std::string* src_;
  static const ::std::string _default_src_;
  ::std::string* data_;
  static const ::std::string _default_data_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// required .Message.CommandType type = 1;
inline bool Message::has_type() const {
  return _has_bit(0);
}
inline void Message::clear_type() {
  type_ = 0;
  _clear_bit(0);
}
inline ::Message_CommandType Message::type() const {
  return static_cast< ::Message_CommandType >(type_);
}
inline void Message::set_type(::Message_CommandType value) {
  GOOGLE_DCHECK(::Message_CommandType_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// required string src = 2;
inline bool Message::has_src() const {
  return _has_bit(1);
}
inline void Message::clear_src() {
  if (src_ != &_default_src_) {
    src_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Message::src() const {
  return *src_;
}
inline void Message::set_src(const ::std::string& value) {
  _set_bit(1);
  if (src_ == &_default_src_) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void Message::set_src(const char* value) {
  _set_bit(1);
  if (src_ == &_default_src_) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void Message::set_src(const char* value, size_t size) {
  _set_bit(1);
  if (src_ == &_default_src_) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_src() {
  _set_bit(1);
  if (src_ == &_default_src_) {
    src_ = new ::std::string;
  }
  return src_;
}

// optional string data = 3;
inline bool Message::has_data() const {
  return _has_bit(2);
}
inline void Message::clear_data() {
  if (data_ != &_default_data_) {
    data_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Message::data() const {
  return *data_;
}
inline void Message::set_data(const ::std::string& value) {
  _set_bit(2);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Message::set_data(const char* value) {
  _set_bit(2);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Message::set_data(const char* value, size_t size) {
  _set_bit(2);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_data() {
  _set_bit(2);
  if (data_ == &_default_data_) {
    data_ = new ::std::string;
  }
  return data_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Message_CommandType>() {
  return ::Message_CommandType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
